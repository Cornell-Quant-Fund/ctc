name: CI

on: 
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4
      - name: Install uv
        run: curl -LsSf https://astral.sh/uv/install.sh | sh
      - name: Install dependencies
        run: ~/.local/bin/uv sync
      - name: Run ruff
        run: ~/.local/bin/uv run ruff check .
      - name: Run mypy
        run: ~/.local/bin/uv run mypy src
      - name: Run tests
        run: ~/.local/bin/uv run pytest

  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: latest
      - name: Install dependencies
        run: pnpm install --frozen-lockfile=false
      - name: Run ESLint
        run: pnpm lint
      - name: Run tests
        run: pnpm test -- --ci
      - name: Build
        run: pnpm build

  build-and-push:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute lowercase image name
        id: vars
        run: echo "image_name_lc=${GITHUB_REPOSITORY,,}" >> "$GITHUB_OUTPUT"

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.vars.outputs.image_name_lc }}/backend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.vars.outputs.image_name_lc }}/frontend
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-remote:
    name: Deploy to Remote Server
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: |
            ${{ secrets.DEPLOY_SSH_KEY }}

      - name: Add remote host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$DEPLOY_HOST" >> ~/.ssh/known_hosts
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}

      - name: Create .env.prod from secrets (lowercase repo for GHCR)
        run: |
          REPO_LC=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          cat > .env.prod << EOF
          # Generated by GitHub Actions
          GITHUB_REPOSITORY=${REPO_LC}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          ALLOW_ANY_API_KEY=false
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_WS_URL=${{ secrets.NEXT_PUBLIC_WS_URL }}
          NEXT_PUBLIC_GOOGLE_CLIENT_ID=${{ secrets.NEXT_PUBLIC_GOOGLE_CLIENT_ID }}
          HTTP_PORT=${{ secrets.HTTP_PORT }}
          HTTPS_PORT=${{ secrets.HTTPS_PORT }}
          EOF

      - name: Create remote app directory
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_APP_DIR: ${{ secrets.DEPLOY_APP_DIR }}
        run: |
          set -euo pipefail
          SSH_TARGET="${DEPLOY_USER}@${DEPLOY_HOST}"
          ssh -o StrictHostKeyChecking=yes "$SSH_TARGET" "mkdir -p '${DEPLOY_APP_DIR}'"

      - name: Upload deployment assets
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_APP_DIR: ${{ secrets.DEPLOY_APP_DIR }}
        run: |
          set -euo pipefail
          SSH_TARGET="${DEPLOY_USER}@${DEPLOY_HOST}"
          scp -o StrictHostKeyChecking=yes docker-compose.prod.yml nginx.conf .env.prod "$SSH_TARGET:${DEPLOY_APP_DIR}/"

      - name: Deploy remotely (Docker + Compose, pull and restart)
        env:
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_APP_DIR: ${{ secrets.DEPLOY_APP_DIR }}
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        run: |
          set -euo pipefail
          SSH_TARGET="${DEPLOY_USER}@${DEPLOY_HOST}"
          ssh -o StrictHostKeyChecking=yes "$SSH_TARGET" bash -s << EOF
          set -euo pipefail
          APP_DIR="${DEPLOY_APP_DIR}"
          GHCR_USERNAME="${GHCR_USERNAME:-}"
          GHCR_TOKEN="${GHCR_TOKEN:-}"

          echo "üìã Checking Docker..."
          if ! command -v docker >/dev/null 2>&1; then
            echo "üê≥ Installing Docker..."
            curl -fsSL https://get.docker.com -o get-docker.sh && sh get-docker.sh && rm get-docker.sh
          fi

          echo "üìã Checking Docker Compose..."
          DC="docker compose"
          if ! docker compose version >/dev/null 2>&1; then
            if command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              echo "üêô Installing docker-compose binary..."
              curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
              chmod +x /usr/local/bin/docker-compose
              DC="docker-compose"
            fi
          fi

          echo "üì¶ Logging in to GHCR (if credentials provided)..."
          if [ -n "\$GHCR_USERNAME" ] && [ -n "\$GHCR_TOKEN" ]; then
            echo "\$GHCR_TOKEN" | docker login ghcr.io -u "\$GHCR_USERNAME" --password-stdin || true
          fi

          echo "üöÄ Deploying with \$DC ..."
          cd "\$APP_DIR"
          # Pull latest images, restart stack
          \$DC -f docker-compose.prod.yml --env-file .env.prod pull
          \$DC -f docker-compose.prod.yml --env-file .env.prod down || true
          \$DC -f docker-compose.prod.yml --env-file .env.prod up -d
          \$DC -f docker-compose.prod.yml --env-file .env.prod ps
          \$DC -f docker-compose.prod.yml --env-file .env.prod logs --tail=20
          EOF
